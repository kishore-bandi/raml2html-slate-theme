'use strict'

/**
 * Ensure a string is safe to use as a html id attribute
 * @param  {string} id The potentially unsafe id string
 * @return {string}    The safe id string
 */
function getSafeId (id) {
  if (id === undefined) id = ''
  return id.toLowerCase().replace(' ', '-')
}

/**
 * Check whether the given array contains an element with an
 * examples attribute
 * @param {array<object>} data An array of RAML nodes (methods, parameters)
 * @return {boolean}
 */
function hasExamples (data) {
  if (!Array.isArray(data)) return false
  return data.reduce((current, item) => current || (Boolean(item.examples) && item.examples.length > 0), false)
}

/**
 * Get all unique response headers of a method
 * Only the first instance of a header will be returned
 * @param  {object} method A method object as found in a parsed RAML file
 * @return {array}         An array of header objects
 */
function getResponseHeaders (method) {
  if (!method || !method.responses) return []
  return method.responses
    .map((resp) => resp.headers ? resp.headers : [])
    .reduce((current, resp) => current.concat(resp), [])
    .filter((header, index, array) => array.findIndex((item) => item.key === header.key) === index)
}

/**
 * TODO add tests
 * Generate a cURL statement for a method on a resource
 * @param  {string} baseUri  The baseUri of the API (if any)
 * @param  {object} method   A method object as generated by RAML
 * @param  {object} resource A resource object as generated by RAML
 * @return {string}          A example curl statement that calls the API
 */
function getCurlStatement (baseUri, method, resource) {
  baseUri = baseUri || ''
  if (baseUri.endsWith('/')) baseUri = baseUri.slice(0, -1)
  method.headers = method.headers || []
  method.queryParameters = method.queryParameters || []
  method.method = method.method || 'get'

  const payload = ['patch', 'post', 'put'].includes(method.method) ? ' \\\n\t-d @request_body' : ''
  const parentUrl = resource.parentUrl || ''
  const relativeUri = resource.relativeUri || '/'

  const headers = method.headers
    .filter((header) => header.examples && header.examples.length !== 0)
    .map((header) => ` \\\n\t-H "${header.key}: ${header.examples[0].value}"`).join('')

  let params = method.queryParameters
    .filter((param) => param.examples && param.examples.length !== 0)
    .map((param) => `${param.key}=${param.examples[0].value}`)
    .join('&')
  params = params === '' ? '' : `?${params}`

  return `curl -X ${method.method.toUpperCase()} "${baseUri}${parentUrl}${relativeUri}${params}"${headers}${payload}`
}

/**
 * Return a short string for use in the language tabs based on the input mime type
 * @param  {string} mime A mime type
 * @return {string}      A short version of the mime type we can use in a css classname
 */
function getLanguage (mime) {
  if (/json/.test(mime)) {
    return 'json'
  } else if (/xml/.test(mime)) {
    return 'xml'
  } else if (mime === 'text/event-stream') {
    return 'sse'
  } else {
    return ''
  }
}

module.exports = {
  getCurlStatement,
  getLanguage,
  getResponseHeaders,
  getSafeId,
  hasExamples
}
